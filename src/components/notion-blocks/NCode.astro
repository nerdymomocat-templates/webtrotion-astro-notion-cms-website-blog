---

import * as interfaces from "../../lib/interfaces";
import Caption from "./Caption.astro";
import { SHORTCODES } from "@/constants";
import { Icon } from "astro-iconify";
import { getTextToAstroIcon } from "@/lib/style-helpers";
import { Code } from 'astro:components';
import {
  transformerNotationFocus,
  transformerNotationDiff,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
  transformerNotationErrorLevel
} from '@shikijs/transformers';

export interface Props {
	block: interfaces.Block;
  setId?:boolean;
}

const { block, setId=true } = Astro.props


const code = block.Code.RichTexts.map(
	(richText: interfaces.RichText) => richText.Text.Content,
).join("");
const language = block.Code.Language.toLowerCase();
const code_inject = SHORTCODES["html"]? code.startsWith(SHORTCODES["html"]):false;
const plainTextCaption = block.Code?.Caption.map((richText) => richText.PlainText).join(' ');
// <Fragment set:html={code.replace(SHORTCODES["html"],"")}/>
// Determine which transformers to use based on the code content
// Function to get the appropriate transformers based on code content
const getTransformers = (codeContent) => {
  const transformers = [];
  if (codeContent.includes('// [!code focus]')) transformers.push(transformerNotationFocus());
  if (codeContent.includes('// [!code ++]') || codeContent.includes('[!code --]')) transformers.push(transformerNotationDiff());
  if (codeContent.includes('// [!code highlight]')) transformers.push(transformerNotationHighlight());
  if (codeContent.includes('// [!code word:')) transformers.push(transformerNotationWordHighlight());
  if (codeContent.includes('// [!code error]') || codeContent.includes('[!code warning]')) transformers.push(transformerNotationErrorLevel());
  return transformers;
};
---


{
  code_inject ?
  (
    <div class="injectedcode w-full mb-1 max-w-full" id={setId?block.Id:undefined}>
    <iframe srcdoc={code.replace(SHORTCODES["html"],"") } class="max-w-full screen:h-[340px] w-full border-none rounded-lg" loading="lazy" title={plainTextCaption}></iframe>
  </div>

  )
  :
  (
  <div class="code w-full mb-1 relative max-w-full text-sm" id={setId?block.Id:undefined}>
    <div class={`${language === 'mermaid' ? "overflow-x-scroll" : "screen:max-h-[340px] overflow-scroll"} min-w-0`}>
                <div class="flex max-w-full">
            <button class="print:hidden copy border-0 p-2 cursor-pointer absolute top-0 right-0 text-gray-500" data-code={code} aria-label="copy code" onclick="
                const code = this.getAttribute('data-code');
                navigator.clipboard.writeText(code);
                const svgBefore = this.querySelector('.copy-icon-before');
                const svgAfter = this.querySelector('.copy-icon-done');
                if (svgBefore && svgAfter) {
                    svgBefore.classList.toggle('hidden');
                    svgAfter.classList.toggle('hidden');
                    setTimeout(() => {
                        svgBefore.classList.toggle('hidden');
                        svgAfter.classList.toggle('hidden');
                    }, 1000);
                }
            ">
              <Icon class="h-6 w-6 copy-icon-before" name={getTextToAstroIcon("clipboard-copy-code")} aria-label="copy code"/>
              <Icon class="h-6 w-6 copy-icon-done hidden" name={getTextToAstroIcon("clipboard-copy-code-done")} aria-label="copied code"/>
            </button>
          </div>
		{

			language === 'mermaid' ? (
         <pre class="rounded mermaid p-4 max-w-full font-mono">{code}</pre>
      ) : (
      <Code code={code} lang={language}   theme={'github-dark-dimmed'} transformers={getTransformers(code)}/>
      )
		}
	</div>
	<Caption richTexts={block.Code.Caption}  block={block}/>
</div>
  )
}
<style is:global>
  /* Styles for focused lines */
  pre.has-focused .line:not(.focused) {
    @apply blur-[1px] opacity-50;
  }

  /* Styles for diff (add/remove) */
  pre.has-diff .line.diff.add {
    @apply bg-blue-900/50 -mx-4 px-4 border-l-4 border-blue-500;
  }
  pre.has-diff .line.diff.remove {
    @apply bg-red-900/50 -mx-4 px-4 border-l-4 border-red-500;
  }

  /* Styles for highlighted lines */
  pre.has-highlighted .line.highlighted {
    @apply bg-yellow-900/50 -mx-4 px-4 border-l-4 border-yellow-500;
  }

  /* Styles for highlighted words */
  .highlighted-word {
    @apply bg-blue-500/50 rounded px-1;
  }

  /* Styles for error and warning lines */
  pre.has-highlighted .line.highlighted.error {
    @apply bg-red-900/50 -mx-4 px-4 border-l-4 border-red-500;
  }
  pre.has-highlighted .line.highlighted.warning {
    @apply bg-yellow-900/50 -mx-4 px-4 border-l-4 border-yellow-500;
  }
</style>
<script>
  import mermaid from 'mermaid'
  mermaid.initialize({ startOnLoad: true, theme: 'base' })
</script>
