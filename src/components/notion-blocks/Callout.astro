---
import * as interfaces from "../../lib/interfaces.ts";
import { convertToTailwindColor, convertToTailwindColorForBorder, generateIconTailwindFilterStyle } from "../../lib/style-helpers.ts";
import RichText from "./RichText.astro";
import NotionBlocks from "../NotionBlocks.astro";

export interface Props {
  block: interfaces.Block;
  headings: interfaces.Block[];
  renderChildren?: boolean; // Make this optional
  setId?:boolean;
}

const { block, headings, renderChildren = true, setId=true } = Astro.props;
---
<div class={`callout flex my-2 mx-auto py-4 px-3 w-full leading-6 rounded border ${convertToTailwindColor(block.Callout.Color)} ${convertToTailwindColorForBorder(block.Callout.Color)}`} id={setId?block.Id:undefined}>
    <div class="m-0 leading-6 mr-2">
        {
            block.Callout.Icon.Type === "emoji" ? (
                block.Callout.Icon.Emoji
            ) : block.Callout.Icon.Type === "external" ? (
                <img src={block.Callout.Icon.Url} class={`w-5 h-5 max-w-none ${generateIconTailwindFilterStyle(block.Callout.Icon.Url)}`} />
            ) : null
        }
    </div>
    <div class="m-0 leading-6">
        {
            block.Callout.RichTexts.map((richText: interfaces.RichText) => (
                <RichText richText={richText}  blockID={block.Id} />
            ))
        }
        {block.Callout.Children && renderChildren && <NotionBlocks blocks={block.Callout.Children} headings={headings} renderChildren={renderChildren} setId={setId}/>}
    </div>
</div>
