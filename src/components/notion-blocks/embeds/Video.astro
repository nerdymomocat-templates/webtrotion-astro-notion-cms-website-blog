---
import * as interfaces from "../../../lib/interfaces.ts";
import { isYouTubeURL, parseYouTubeVideoId } from "../../../lib/blog-helpers.ts";
import Caption from "../Caption.astro";
import { filePath } from "../../../lib/blog-helpers";
import EmbedGeneric from "./EmbedGeneric.astro";
import { getTextToAstroIcon } from "@/lib/style-helpers";
import Icon from "astro-iconify";
import { ENABLE_LIGHTBOX } from "@/constants";

export interface Props {
	block: interfaces.Block;
  setId?:boolean;
}

const { block, setId=true } = Astro.props;

let url: URL | null = null;
let videoUrl = "";
if (block.Video.External) {
	videoUrl = block.Video.External?.Url;
	url = new URL(block.Video.External?.Url);
} else if (block.Video.File) {
	videoUrl = filePath(new URL(block.Video.File.Url));
}
const plainTextCaption = block.Video?.Caption.map((richText) => richText.PlainText).join(' ');
---

<div class="video relative" id={setId?block.Id:undefined}>
	{
		videoUrl &&
			(url ? (
				isYouTubeURL(url) ? (
					<iframe
						class="max-w-full h-[340px] w-full lazyload"
						data-src={`https://www.youtube.com/embed/${parseYouTubeVideoId(url)}`}
						title="YouTube video player"
						allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
						allowfullscreen
            loading="lazy"
					/>
				) : (
					<EmbedGeneric url={url} caption={plainTextCaption} />
				)
			) : (
      <>
      {
						ENABLE_LIGHTBOX && (
							<a href={videoUrl} class="mediaglightbox absolute top-4 right-4 m-2 cursor-pointer z-10 text-accent" data-description={plainTextCaption}>
								<Icon name={getTextToAstroIcon("expand")} class="inline h-6 w-6" />
							</a>
						)
					}
					<video class="max-w-full h-[340px] w-full border-none rounded-lg" controls>
						<source src={videoUrl} type="video/mp4" />
						Your browser does not support the video tag.
					</video>

				</>
			))
	}
	<Caption richTexts={block.Video.Caption} block={block} />
</div>
