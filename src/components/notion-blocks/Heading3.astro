---
import * as interfaces from "../../lib/interfaces.ts";
import { buildHeadingId } from "../../lib/blog-helpers.ts";
import RichText from "./RichText.astro";
import NotionBlocks from "../NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	headings: interfaces.Block[];
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, headings, renderChildren = true, setId = true } = Astro.props;

const id = buildHeadingId(block.Heading3);
---

{
	block.Heading3.IsToggleable ? (
  <h4 class="hidden pagefind-phantom-heading" id={setId ? "--pagefind-phantom-heading-"+id : undefined}>{block.Heading3.RichTexts.map((richText: interfaces.RichText) => richText.PlainText).join(' ')}</h4>
		<details class="toggle mb-0 mt-8">
			<summary class="flex cursor-pointer list-none gap-2" data-pagefind-ignore="all">
				<div>
					<svg
						class="rotate-svg mt-1 flex-shrink-0 transition-all duration-300"
						fill="none"
						height="20"
						width="20"
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						viewBox="0 0 24 24"
					>
						<polyline points="12 8 18 14 12 20" />
					</svg>
				</div>
				<a
					class="inline"
					href={setId ? `#${id}` : undefined}
					id={setId ? id : undefined}
					onclick="var fullUrl = `${window.location.origin}${window.location.pathname}#${this.id}`; navigator.clipboard.writeText(fullUrl); this.closest('details').open = !this.closest('details').open;"
				>
					<h4 class={`toggle-h4 mb-4 mt-8 inline text-lg ${setId ? "hasId" : "noId"}`}>
						{block.Heading3.RichTexts.map((richText: interfaces.RichText) => (
							<RichText richText={richText} blockID={block.Id} />
						))}
					</h4>
				</a>
			</summary>
			<div class="pl-10">
				{block.Heading3.Children && renderChildren && (
					<NotionBlocks
						blocks={block.Heading3.Children}
						headings={headings}
						renderChildren={renderChildren}
						setId={setId}
					/>
				)}
			</div>
		</details>
	) : (

			<h4 class={`cursor-pointer mb-4 mt-8 text-lg font-normal ${setId ? "hasId" : "noId"}`} id={setId ? id : undefined} onclick="
        var fullUrl = `${window.location.origin}${window.location.pathname}#${id}`;
        navigator.clipboard.writeText(fullUrl);
        window.history.pushState(null, '', fullUrl);
        document.getElementById(`${id}`).scrollIntoView({ behavior: 'smooth' });
    ">
				{block.Heading3.RichTexts.map((richText: interfaces.RichText) => (
					<RichText richText={richText} blockID={block.Id} />
				))}
			</h4>
	)
}

<style>
	h4.hasId::before {
		content: "#";
		position: absolute;
		color: rgb(var(--theme-accent));
		margin-left: -1.5rem;
		display: inline-block;
		opacity: 0; /* Start with invisible content */
		transition: opacity 0.3s ease; /* Transition the opacity */
	}
	h4.noId::before {
		display: none;
	}

	h4.hasId:hover::before {
		opacity: 1; /* Make the content visible on hover */
	}
	h4.hasId.toggle-h4::before {
		margin-left: -2.5rem;
	}
	details[open] > summary > div > .flex-shrink-0.rotate-svg {
		transform: rotate(90deg);
	}
	summary::-webkit-details-marker {
		display: none;
	}
</style>
