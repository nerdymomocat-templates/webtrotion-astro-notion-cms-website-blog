---
import * as interfaces from "../../lib/interfaces.ts";
import { convertToTailwindColor } from "../../lib/style-helpers.ts";
import RichText from "./RichText.astro";
import NotionBlocks from "../NotionBlocks.astro";

export interface Props {
  block: interfaces.Block;
  headings: interfaces.Block[];
  renderChildren?: boolean; // Make this optional
}

const { block, headings, renderChildren = true } = Astro.props;
---

<div class="to-do pl-2 leading-7" id={block.Id}>
	{
		block.ListItems.filter((b: interfaces.Block) => b.Type === "to_do").map(
			(b: interfaces.Block, index) => (
				<div key={index} class="mb-2" id={b.Id}>
					<div class={`flex items-start ${convertToTailwindColor(b.ToDo.Color)}`}>
						{/* Flex container for the checkbox and text */}
						<div class="pr-2">
							{/* Padding for the checkbox */}
							<input
								type="checkbox"
								checked={b.ToDo.Checked}
								disabled
								class="checkbox h-4 w-4 rounded border-gray-300 bg-gray-100 dark:border-gray-600 dark:bg-gray-700"
							/>
						</div>
						<div class="flex-1">
							{/* Container for text, taking up the rest of the space */}
							{b.ToDo.RichTexts.map((richText: interfaces.RichText) => {
								if (b.ToDo.Checked) {
									return (
										<span class="block line-through decoration-slate-500/50">
											{/* Block element for the text */}
											<RichText richText={richText} blockID={b.Id} />
										</span>
									);
								}
								return <RichText richText={richText} blockID={b.Id} class="block" />;
							})}
						</div>
					</div>
					{b.HasChildren && renderChildren && (
						<div class="mt-1">
							{/* Margin for spacing between the to-do and its children */}
							<NotionBlocks blocks={b.ToDo.Children} headings={headings} />
						</div>
					)}
				</div>
			),
		)
	}
</div>
