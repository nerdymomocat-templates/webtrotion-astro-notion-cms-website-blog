---
import * as interfaces from "../../lib/interfaces.ts";
import { convertToTailwindColor } from "../../lib/style-helpers.ts";
import RichText from "./RichText.astro";
import NotionBlocks from "../NotionBlocks.astro";

export interface Props {
  block: interfaces.Block;
  headings: interfaces.Block[];
  renderChildren?: boolean; // Make this optional
}

const { block, headings, renderChildren = true } = Astro.props;
---

<details class={`toggle ${convertToTailwindColor(block.Toggle.Color)}`} id={block.Id}>
	<summary class="flex cursor-pointer list-none gap-2">
    <div>
    <svg class="flex-shrink-0 transition-all duration-300 rotate-svg" fill="none" height="20" width="20" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24">
      <polyline points="12 8 18 14 12 20"></polyline>
    </svg>
  </div>
  <div>
		{

			block.Toggle.RichTexts.map((richText: interfaces.RichText) => (
				<RichText richText={richText}  blockID={block.Id}/>
			))

		}
    </div>
	</summary>
	<div class="pl-10">
		<NotionBlocks blocks={block.Toggle.Children} headings={headings} renderChildren={renderChildren}/>
	</div>
</details>

<style>
	.toggle > summary > a {
		display: inline;
	}
  /* This targets only the direct child SVG of the opened details */
details[open] > summary > div >.flex-shrink-0.rotate-svg {
  transform: rotate(-90deg);
}
</style>
