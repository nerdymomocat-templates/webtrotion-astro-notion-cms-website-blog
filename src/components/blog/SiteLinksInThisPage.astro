---
import type { Block, Post, ReferencesInPage } from '@/lib/interfaces';
interface Props {
	post: Post;
  filteredReferencesInPage: ReferencesInPage[];
}
const { post, filteredReferencesInPage } = Astro.props;
const groupedReferences: { [key: string]: Block[] } =
filteredReferencesInPage.reduce((acc, ref) => {
    // Group by direct_nonmedia_link and collect Block objects
    if (ref.link_to_pageid) {
      const key = ref.link_to_pageid;
      acc[key] = acc[key] || [];
      acc[key].push(ref.block);
    }

    // Group by each Href in external_hrefs and collect Block objects
    ref.other_pages.forEach(richText => {
      if (richText.InternalHref?.PageId) {
        const key = richText.InternalHref.PageId;
        acc[key] = acc[key] || [];
        acc[key].push(ref.block);
      }
      else if (richText.Mention?.Page?.PageId) {
        const key = richText.Mention.Page.PageId;
        acc[key] = acc[key] || [];
        acc[key].push(ref.block);
      }
    });

    return acc;
  }, {});


---

{groupedReferences && (<div>
Posts Mentioned In This Page
  {Object.entries(groupedReferences).map(([entryId, blocks]) => (
    <p key={entryId}>
      Mentions {entryId} at {blocks.map((block, index) => `${index + 1}:${block.Id}`).join(' ')}
    </p>
  ))}
</div>)}
