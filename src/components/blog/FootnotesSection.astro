---
import type { Footnote } from "@/lib/interfaces";
import NotionBlocks from "@/components/NotionBlocks.astro";
import { adjustedFootnotesConfig } from "@/lib/notion/client";

export interface Props {
	footnotes: Footnote[];
}

const { footnotes } = Astro.props;

// Remove duplicates based on Marker (in case same footnote appears multiple times)
const uniqueFootnotes = Array.from(
	new Map(footnotes.map((fn) => [fn.Marker, fn])).values()
);

// Sort by Index (sequential numbering) if available, otherwise by Marker
uniqueFootnotes.sort((a, b) => {
	if (a.Index && b.Index) {
		return a.Index - b.Index;
	}
	return a.Marker.localeCompare(b.Marker);
});

// Check if start-of-child-blocks is enabled (no spacing needed for block-type footnotes)
const isStartOfChildBlocks = adjustedFootnotesConfig?.["in-page-footnotes-settings"]?.source?.["start-of-child-blocks"] === true;

// Define styles matching Interlinked Content section
const footnotesHeaderStyles = `
	#autogenerated-footnotes::before {
		content: "#";
		position: absolute;
		color: color-mix(in srgb, var(--color-accent) 50%, transparent);
		margin-left: -1.5rem;
		display: inline-block;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	#autogenerated-footnotes:hover::before {
		opacity: 1;
	}

	#-tocid--autogenerated-footnotes,
	#-vistocid--autogenerated-footnotes {
		display: block !important;
	}

	#-bottomtocid--autogenerated-footnotes {
		display: inline !important;
	}
`;
---

{
	uniqueFootnotes.length > 0 && (
		<section class="footnotes-section mt-12">
			<hr class="divider bg-accent/30 mx-auto my-4 h-0.5 w-full rounded-sm border-none" />
			<h2
				class="non-toggle-h2 mb-4 cursor-pointer text-2xl font-normal"
				id="autogenerated-footnotes"
				onclick="
					var fullUrl = `${window.location.origin}${window.location.pathname}#${id}`;
					navigator.clipboard.writeText(fullUrl);
					window.history.pushState(null, '', fullUrl);
					document.getElementById(`${id}`).scrollIntoView({ behavior: 'smooth' });
				"
			>
				Footnotes
			</h2>
			<style set:html={footnotesHeaderStyles} />
			<ol class={isStartOfChildBlocks ? "text-sm" : "space-y-2 text-sm"}>
				{uniqueFootnotes.map((footnote) => (
					<li
						id={`footnote-def-${footnote.Marker}`}
						class="flex gap-2 items-baseline"
					>
						{footnote.SourceBlockId ? (
							<a
								href={`#${footnote.SourceBlockId}`}
								class="font-mono text-sm text-link hover:underline shrink-0 no-underline"
								aria-label={`Jump back to footnote ${footnote.Index || footnote.Marker} in text`}
							>
								[{footnote.Index || footnote.Marker}]
							</a>
						) : (
							<span class="font-mono text-sm text-accent-2/70 shrink-0">
								[{footnote.Index || footnote.Marker}]
							</span>
						)}
						<div class="footnote-content flex-1">
							{footnote.Content.Type === "rich_text" &&
								footnote.Content.RichTexts && (
									<div>
										{footnote.Content.RichTexts.map((rt) => (
											<>
												{rt.Text && (
													<span
														class={
															(rt.Annotation.Bold
																? "font-bold "
																: "") +
															(rt.Annotation.Italic ? "italic " : "") +
															(rt.Annotation.Strikethrough
																? "line-through "
																: "") +
															(rt.Annotation.Underline ? "underline " : "") +
															(rt.Annotation.Code
																? "font-mono text-xs bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded "
																: "")
														}
														style={
															rt.Annotation.Color &&
															rt.Annotation.Color !== "default"
																? `color: ${rt.Annotation.Color}`
																: ""
														}
													>
														{rt.Href ? (
															<a
																href={rt.Href}
																class="text-link hover:underline"
															>
																{rt.Text.Content}
															</a>
														) : (
															rt.Text.Content
														)}
													</span>
												)}
												{rt.Equation && (
													<span class="inline-block">{rt.Equation.Expression}</span>
												)}
											</>
										))}
									</div>
								)}
							{footnote.Content.Type === "blocks" &&
								footnote.Content.Blocks && (
									<div class="prose prose-sm max-w-none dark:prose-invert">
										<NotionBlocks
											blocks={footnote.Content.Blocks}
											renderChildren={true}
											setId={false}
										/>
									</div>
								)}
							{footnote.Content.Type === "comment" &&
								footnote.Content.RichTexts && (
									<div>
										{footnote.Content.RichTexts.map((rt) => (
											<>
												{rt.Text && (
													<span
														class={
															(rt.Annotation.Bold
																? "font-bold "
																: "") +
															(rt.Annotation.Italic ? "italic " : "") +
															(rt.Annotation.Strikethrough
																? "line-through "
																: "") +
															(rt.Annotation.Underline ? "underline " : "") +
															(rt.Annotation.Code
																? "font-mono text-xs bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded "
																: "")
														}
														style={
															rt.Annotation.Color &&
															rt.Annotation.Color !== "default"
																? `color: ${rt.Annotation.Color}`
																: ""
														}
													>
														{rt.Href ? (
															<a
																href={rt.Href}
																class="text-link hover:underline"
															>
																{rt.Text.Content}
															</a>
														) : (
															rt.Text.Content
														)}
													</span>
												)}
											</>
										))}
										{footnote.Content.CommentAttachments &&
											footnote.Content.CommentAttachments.length > 0 && (
												<div class="mt-2 space-y-1">
													{footnote.Content.CommentAttachments.map(
														(attachment) =>
															attachment.Category === "image" && (
																<img
																	src={attachment.Url}
																	alt=""
																	class="max-w-full rounded"
																/>
															)
													)}
												</div>
											)}
									</div>
								)}
						</div>
					</li>
				))}
			</ol>
		</section>
	)
}
