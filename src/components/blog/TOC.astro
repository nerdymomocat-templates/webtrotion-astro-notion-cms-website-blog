---
import type { MarkdownHeading } from "astro";
import { generateToc } from "src/utils/generateToc";
import TOCHeading from "./TOCHeading.astro";

interface Props {
  headings: Array<MarkdownHeading>;
}

const { headings } = Astro.props;
const toc = generateToc(headings);
---

<aside class="toc-container fixed top-40 right-4 hidden sm:block print:hidden z-10">
  <div class="visual-container w-8 p-2 flex flex-col items-end space-y-2 overflow-hidden absolute top-6 right-0 transition-opacity duration-500 bg-bgColor">
    {toc.map((heading) => (
      <TOCHeading heading={heading} visualOnly={true} />
    ))}
  </div>
  <div class="toc-content invisible opacity-0 translate-x-4 transition-all duration-200 absolute top-0 right-1 bg-bgColor border border-accent/10 rounded-xl p-2 max-h-[78vh] overflow-y-auto w-60 shadow-xl shadow-accent/5">
    <ul class="mt-2 text-sm">
      {toc.map((heading) => (
        <TOCHeading heading={heading} />
      ))}
    </ul>
  </div>
</aside>

<script>
  const tocContainer = document.querySelector('.toc-container');
  const tocContent = document.querySelector('.toc-content');
  const visualContainer = tocContainer?.querySelector('.visual-container');

  if (tocContainer && tocContent && visualContainer) {
    const showContent = () => {
      tocContent.classList.remove('invisible', 'opacity-0', 'translate-x-4');
      tocContent.classList.add('visible', 'opacity-100', 'translate-x-0');
      visualContainer.classList.add('opacity-0', 'duration-0');
      visualContainer.classList.remove('duration-500');
      (visualContainer as HTMLElement).offsetHeight; // Trigger reflow
      visualContainer.classList.remove('duration-0');
      visualContainer.classList.add('duration-500');
    };

    const hideContent = () => {
      tocContent.classList.remove('visible', 'opacity-100', 'translate-x-0');
      tocContent.classList.add('invisible', 'opacity-0', 'translate-x-4');
      visualContainer.classList.remove('opacity-0');
    };

    tocContainer.addEventListener('mouseenter', showContent);
    tocContainer.addEventListener('mouseleave', hideContent);

    // Close the TOC when clicking a link
    tocContent.addEventListener('click', (event) => {
      const target = event.target as Element;
      if (target.tagName === 'A') {
        hideContent();
        event.preventDefault();
        setTimeout(() => {
          window.location.href = (target as HTMLAnchorElement).href;
        }, 50);
      }
    });
  }
</script>
