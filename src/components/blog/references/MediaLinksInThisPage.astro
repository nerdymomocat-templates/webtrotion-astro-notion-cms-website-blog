---
import type { Post, ReferencesInPage } from '@/lib/interfaces';
import NBlocksPopover from './NBlocksPopover.astro';
import { getReferenceLink } from '@/lib/blog-helpers';
interface Props {
	post: Post;
  filteredReferencesInPage: ReferencesInPage[];
}
const { post, filteredReferencesInPage } = Astro.props;

const groupedReferences: { [key: string]: Block[] } =
filteredReferencesInPage.reduce((acc, ref) => {
    // Group by direct_nonmedia_link and collect Block objects
    if (ref.direct_media_link) {
      const key = ref.direct_media_link;
      acc[key] = acc[key] || [];
      acc[key].push(ref.block);
    }
    return acc;
  }, {});

  const blockIdLinks = {};
  if (groupedReferences) {
  for (const dml of Object.keys(groupedReferences)) {
    for (const block of groupedReferences[dml]) {
      const result = await getReferenceLink(post.PageId, undefined, block, true);
      blockIdLinks[block.Id] = result[0];
    }
  }
}



---

{groupedReferences && (<div>
  Media Links In This Page
  {Object.entries(groupedReferences).map(([dml, blocks]) => (
    <div>
    <div key={dml} class="inline-block">
      Mentions {' '}{dml} at {' '}
       {blocks.map((block, index) => (<><NBlocksPopover block={block} linkedTo={blockIdLinks[block.Id]} popoverSpanText={`[${index + 1}]`}/>{' '}</>))}
    </div>
  </div>
  ))}
</div>)}
