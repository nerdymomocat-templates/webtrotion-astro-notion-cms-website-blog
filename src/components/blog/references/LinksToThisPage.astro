---
import type { Block, Post } from '@/lib/interfaces';
import NBlocksPopover from './NBlocksPopover.astro';
import { getReferenceLink } from '@/lib/blog-helpers';
import { REFERENCES } from '@/constants';
interface Props {
	post: Post;
  allReferencesToPage: { entryId: string, block: Block }[]
}
const { post, allReferencesToPage } = Astro.props;
const groupedReferences = allReferencesToPage? allReferencesToPage.reduce((acc, { entryId, block }) => {
  acc[entryId] = acc[entryId] || [];
  acc[entryId].push(block);
  return acc;
}, {}): null;

const entryIdLinksEntry = {};
const blockIdLinks = {};

if (groupedReferences) {
  for (const entryId of Object.keys(groupedReferences)) {
    entryIdLinksEntry[entryId] = await getReferenceLink(post.PageId, entryId);
    for (const block of groupedReferences[entryId]) {
      const result = await getReferenceLink(post.PageId, entryId, block);
      blockIdLinks[block.Id] = result[0];
    }
  }
}

---

{
  groupedReferences && Object.keys(groupedReferences).length > 0 && (
    <div>
      <span class="font-semibold">
        Pages That Mention This Page
      </span>
      {Object.entries(groupedReferences).map(([entryId, blocks]) => (
        <div class="ml-2" key={entryId}>
          <div class="inline-block">
            {REFERENCES && REFERENCES["POPOVERS"] ? (
              <>
              <a href={entryIdLinksEntry[entryId][0]} class="text-link underline decoration-wavy decoration-accent-2/20">
                  {entryIdLinksEntry[entryId][1].Title}
                </a>
                {" at "}
                {blocks.map((block, index) => (
                  <NBlocksPopover
                    block={block}
                    linkedTo={blockIdLinks[block.Id]}
                    popoverSpanText={`[${index + 1}]`}
                    popoverTitle={entryIdLinksEntry[entryId][1].Title}
                    font = {"font-mono"}
                  />
                ))}
              </>
            ) : (
              <>
                <a href={entryIdLinksEntry[entryId][0]} class="text-link">
                  {entryIdLinksEntry[entryId][1].Title}
                </a>
                {" at "}
                {blocks.map((block, index) => (
                  <a key={block.Id} href={blockIdLinks[block.Id]} class="text-link font-mono">
                    {`[${index + 1}]`}
                  </a>
                ))}
              </>
            )}
          </div>
        </div>
      ))}
    </div>
    <br>
  )
}

