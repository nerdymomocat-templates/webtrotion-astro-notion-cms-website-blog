---
import PageLayout from "../layouts/Base.astro";
// import PostPreview from "../components/blog/PostPreview.astro";
import { getAllPages, getPostContentByPostId, processFileBlocks } from "@/lib/notion/client";
import { extractTargetBlocks } from "../lib/blog-helpers";
import NotionBlocks from "../components/NotionBlocks.astro";
import type { Post } from "../lib/interfaces";

// import { siteConfig } from "@/site-config";
// import { siteInfo } from "@/utils";
import { siteInfo } from "@/siteInfo";

export async function getStaticPaths() {
	const pages = await getAllPages();

	return pages.map((page) => ({
		params: { page: page.Slug === siteInfo.homePageSlug ? undefined : `/${page.Slug}` },
		props: { page },
	}));
}

interface Props {
	page: Post;
}

const { page: slug } = Astro.params;
const { page } = Astro.props;

let pageFound = true;
let blocks = null;
let referencesInPage = null;

if (!page) {
	console.log("Page not found");
	pageFound = false;
}
//NOTE: later if i want posts on my home page which i very well might!
// const [blocks, rankedPosts] = await Promise.all([
// 	getAllBlocksByBlockId(page.PageId),
// 	getRankedPosts(),
// ]);
if (pageFound) {
	const result = await getPostContentByPostId(page);
  blocks = result.blocks;
  referencesInPage = result.referencesInPage;


	const fileAtacchedBlocks = extractTargetBlocks(["image","video","file","audio"], blocks)
		.filter((block) => {
			if (!block) {
				return false;
			}
			const imageOrVideoOrAudioOrFile = block.NImage || block.File || block.Video || block.NAudio;
			return (
				imageOrVideoOrAudioOrFile &&
				imageOrVideoOrAudioOrFile.File &&
				imageOrVideoOrAudioOrFile.File.Url
			);
		});

	const processedFile = await processFileBlocks(fileAtacchedBlocks);
}
---

{pageFound &&(<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<PageLayout
	meta={{
		title: page.Title || siteInfo.title,
		description: page.Excerpt || siteInfo.description,
		ogImage: `/og-image/${page.Slug}.png`,
	}}
>
	<div class="sm:grid sm:grid-cols-4 sm:items-start sm:gap-x-10">
		<article class="col-span-3 break-words" data-pagefind-body>
			<div class="">
				<NotionBlocks blocks={blocks} isRoot={true} />
			</div>
		</article>
	</div>
</PageLayout>
<button
	id="to-top-btn"
	class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
	aria-label="Back to Top"
	data-show="false"
	><svg
		xmlns="http://www.w3.org/2000/svg"
		aria-hidden="true"
		focusable="false"
		fill="none"
		viewBox="0 0 24 24"
		stroke-width="2"
		stroke="currentColor"
		class="h-6 w-6"
	>
		<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
	</svg>
</button>)}
