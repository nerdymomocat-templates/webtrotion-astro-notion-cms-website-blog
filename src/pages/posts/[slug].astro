---
import NotionBlocks from "@/components/NotionBlocks.astro";
import PostLayout from "@/layouts/BlogPost.astro";
import { extractTargetBlocks, filePath } from "@/lib/blog-helpers";
import {
	downloadFile,
	getAllBlocksByBlockId,
	getAllPosts,
	getBlock,
	getPostContentByPostId,
	processFileBlocks,
} from "@/lib/notion/client";
import type { Post } from "@/lib/interfaces";
import { buildHeadings } from "@/utils";

export async function getStaticPaths() {
	const posts = await getAllPosts();

	return posts.map((post) => ({
		params: { slug: post.Slug },
		props: { post },
	}));
}
interface Props {
	post: Post;
}
const { post } = Astro.props;
let postFound = true;
let headings = null;
let blocks = null;

if (!post) {
	console.log("Post not found. slug: ${slug}");
	postFound = false;
}

if (postFound) {
	blocks = await getPostContentByPostId(post);

	headings = buildHeadings(blocks);

	const fileAtacchedBlocks = extractTargetBlocks("image", blocks)
		.concat(extractTargetBlocks("video", blocks))
		.concat(extractTargetBlocks("file", blocks))
		.concat(extractTargetBlocks("audio", blocks))
		.filter((block) => {
			if (!block) {
				return false;
			}
			const imageOrVideoOrAudioOrFile = block.NImage || block.File || block.Video || block.NAudio;
			return (
				imageOrVideoOrAudioOrFile &&
				imageOrVideoOrAudioOrFile.File &&
				imageOrVideoOrAudioOrFile.File.Url
			);
		});

	const processedFile = await processFileBlocks(fileAtacchedBlocks);
}

// // Download files
// await Promise.all(
// 	fileAtacchedBlocks
// 		.map(async (block) => {
// 			const expiryTime = (block.NImage || block.File || block.Video || block.NAudio).File
// 				.ExpiryTime;
// 			if (Date.parse(expiryTime) > Date.now()) {
// 				return Promise.resolve(block);
// 			}
// 			return getBlock(block.Id);
// 		})
// 		.map((promise) =>
// 			promise.then((block) => {
// 				let url!: URL;
// 				try {
// 					url = new URL((block.NImage || block.File || block.Video || block.NAudio).File.Url);
// 				} catch (err) {
// 					console.log("Invalid file URL");
// 					return Promise.reject();
// 				}
// 				return Promise.resolve(url);
// 			}),
// 		)
// 		.map((promise) => promise.then(downloadFile)),
// );

// let ogImage;
// if (post.FeaturedImage) {
// 	ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site).toString();
// }
---

<!-- FIXME: use this maybe later for correct collect based stuff--><!-- <PostLayout post={entry}>
	<Content />
</PostLayout> --><!-- <PostLayout post={post} ogImage={ogImage} headings={headings}> -->
  {postFound &&
  (<PostLayout post={post} headings={headings}>
	<div class="post-body max-w-prose">
		<!-- <div class="post-body"> -->
		 <NotionBlocks blocks={blocks} isRoot={true} />
	</div>
</PostLayout>
)}
