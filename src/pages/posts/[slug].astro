---
import NotionBlocks from "@/components/NotionBlocks.astro";
import PostLayout from "@/layouts/BlogPost.astro";
import {
	extractTargetBlocks,
	resetCurrentHeadings,
	resetFirstImage,
	setCurrentHeadings,
	setTrackCurrentPageId,
} from "@/lib/blog-helpers";
import { getAllPosts, getPostContentByPostId, processFileBlocks } from "@/lib/notion/client";
import type { Post } from "@/lib/interfaces";
import { buildHeadings } from "@/utils";
import { LAST_BUILD_TIME } from "@/constants";
import fs from "fs/promises";
import path from "path";

export async function getStaticPaths() {
	const posts = await getAllPosts();

	return posts.map((post) => ({
		params: { slug: post.Slug },
		props: { post },
	}));
}
interface Props {
	post: Post;
}

const { post } = Astro.props;

resetCurrentHeadings();
let postFound = true;
let headings = null;
let blocks = null;
let referencesInPage = null;

if (!post) {
	console.log("Post not found. slug: ${slug}");
	postFound = false;
}

let postLastUpdatedBeforeLastBuild = false;
if (postFound) {
	postLastUpdatedBeforeLastBuild = LAST_BUILD_TIME
		? post?.LastUpdatedTimeStamp
			? post.LastUpdatedTimeStamp < LAST_BUILD_TIME
			: false
		: false;
}

let cachedHtml = "";
// If the page was updated before the last build, try to read the cached HTML.
if (postFound && postLastUpdatedBeforeLastBuild) {
	const cacheFilePath = path.join("./tmp/blocks-html-cache", `${post.Slug}.html`);
	try {
		cachedHtml = await fs.readFile(cacheFilePath, "utf-8");
	} catch (e) {
		// File doesn't exist; fallback to NotionBlocks.
		cachedHtml = "";
	}
}

if (postFound) {
	const result = await getPostContentByPostId(post);
	blocks = result.blocks;
	referencesInPage = result.referencesInPage;

	headings = buildHeadings(blocks);
	setCurrentHeadings(headings);

	if (!postLastUpdatedBeforeLastBuild) {
		const fileAtacchedBlocks = extractTargetBlocks(
			["image", "video", "file", "audio"],
			blocks,
		).filter((block) => {
			if (!block) {
				return false;
			}
			const imageOrVideoOrAudioOrFile = block.NImage || block.File || block.Video || block.NAudio;
			return (
				imageOrVideoOrAudioOrFile &&
				imageOrVideoOrAudioOrFile.File &&
				imageOrVideoOrAudioOrFile.File.Url
			);
		});

		const processedFile = await processFileBlocks(fileAtacchedBlocks);
	}
}
---

{
	postFound && resetFirstImage() && setTrackCurrentPageId(post.PageId) && (
		<PostLayout post={post} headings={headings}>
			{postLastUpdatedBeforeLastBuild && cachedHtml?(
			<div
				class="post-body max-w-[708px] print:max-w-full"
				set:html={cachedHtml} data-html-type="cached"
			></div>
			) :(
			<div class="post-body max-w-[708px] print:max-w-full" data-html-type="new">
				<NotionBlocks blocks={blocks} />
			</div>
			)}
		</PostLayout>
	)
}
