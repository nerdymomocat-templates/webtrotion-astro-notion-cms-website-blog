---
import type { SiteMeta } from "@/types";
// import { ViewTransitions } from "astro:transitions";
import BaseHead from "@/components/BaseHead";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import SkipLink from "@/components/SkipLink";
import { siteInfo } from "@/siteInfo";
import { ENABLE_LIGHTBOX, REFERENCES } from "@/constants";
interface Props {
meta: SiteMeta;
}
const {
meta: { title = siteInfo.title, description = siteInfo.description, ogImage, articleDate },
} = Astro.props;
---
<html lang={siteInfo.lang}>
   <head>
      <BaseHead title={title} description={description} ogImage={ogImage} articleDate={articleDate} />
      <!-- <ViewTransitions /> -->
   </head>
   <body>
      <SkipLink />
      <Header />
      <main id="main" class="lg:w-[125%]">
         <slot />
      </main>
      <Footer />
      {/*Lightbox */}
      {
      ENABLE_LIGHTBOX && (
      <script type="module">
         import 'https://cdn.jsdelivr.net/gh/mcstudios/glightbox/dist/js/glightbox.min.js';

         window.addEventListener('load', () => {
           const lightbox = GLightbox({
             selector: '.mediaglightbox, .fileglightbox, .embedglightbox'
           });
         });
      </script>
      )
      }
      {
      REFERENCES && REFERENCES["popovers"] && (
      <script type="module">
  import { computePosition, offset, shift, flip, autoUpdate } from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@1.5.3/+esm';

  document.addEventListener('DOMContentLoaded', () => {
    const popoverTriggers = document.querySelectorAll('[data-popover-target]');
    let activePopover = null;
    let cleanupAutoUpdate = new Map();
    let hoverTimeout;

    const hidePopover = (popoverEl) => {
      if (popoverEl) {
        popoverEl.style.visibility = 'hidden';
        popoverEl.style.opacity = '0';
        popoverEl.style.top = '0px';
        popoverEl.style.left = '0px';

        const cleanup = cleanupAutoUpdate.get(popoverEl);
        if (cleanup) {
          cleanup();
          cleanupAutoUpdate.delete(popoverEl);
        }

        if (activePopover === popoverEl) {
          activePopover = null;
        }
      }
    };

    const hideAllPopovers = () => {
      if (activePopover) {
        hidePopover(activePopover);
      }
    };

    const showPopover = (triggerEl, popoverEl) => {
      if (activePopover !== popoverEl) {
        hideAllPopovers();
        activePopover = popoverEl;
      }

      popoverEl.style.visibility = 'visible';
      popoverEl.style.opacity = '1';

      const update = () => {
        computePosition(triggerEl, popoverEl, {
          middleware: [shift({ padding: 5 }), flip({ padding: 5 }), offset(10)]
        }).then(({ x, y }) => {
          Object.assign(popoverEl.style, {
            left: `${x}px`,
            top: `${y}px`,
            position: 'absolute'
          });
        });
      };

      update();
      cleanupAutoUpdate.set(popoverEl, autoUpdate(triggerEl, popoverEl, update));
    };

    popoverTriggers.forEach(triggerEl => {
      const popoverID = triggerEl.dataset.popoverTarget;
      const popoverEl = document.getElementById(popoverID);

      triggerEl.addEventListener('mouseenter', () => {
        clearTimeout(hoverTimeout);
        showPopover(triggerEl, popoverEl);
      });

      triggerEl.addEventListener('mouseleave', () => {
        hoverTimeout = setTimeout(() => {
          // Check if the mouse moved to a child popover or left all popovers
          if (!popoverEl.contains(document.activeElement)) {
            hidePopover(popoverEl);
          }
        }, 100);
      });

      triggerEl.addEventListener('focus', () => {
        showPopover(triggerEl, popoverEl);
      });

      triggerEl.addEventListener('blur', () => {
        hidePopover(popoverEl);
      });

      popoverEl.addEventListener('mouseenter', () => {
        clearTimeout(hoverTimeout);
      });

      popoverEl.addEventListener('mouseleave', () => {
        hidePopover(popoverEl);
      });
    });

    document.addEventListener('click', (event) => {
      if (!event.target.closest('[data-popover-target]')) {
        hideAllPopovers();
      }
    });

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        hideAllPopovers();
      }
    });
  });
</script>

      )
      }
   </body>
</html>
