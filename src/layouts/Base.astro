---
import type { SiteMeta } from "@/types";
import BaseHead from "@/components/BaseHead";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import SkipLink from "@/components/SkipLink";
import { siteInfo } from "@/siteInfo";
import { ENABLE_LIGHTBOX, REFERENCES } from "@/constants";
interface Props {
meta: SiteMeta;
}
const {
meta: { title = siteInfo.title, description = siteInfo.description, ogImage, articleDate },
} = Astro.props;
---
<html lang={siteInfo.lang}>
   <head>
      <BaseHead title={title} description={description} ogImage={ogImage} articleDate={articleDate} />
   </head>
   <body class="print:max-w-full screen:max-w-3xl">
      <SkipLink />
      <Header />
      <main id="main" class="lg:w-[125%]">
         <slot />
      </main>
      <Footer />
      <script type="module">
        // Listen for beforeprint event to open all details elements
window.addEventListener('beforeprint', function () {
    document.querySelectorAll('details').forEach(function (detail) {
        detail.setAttribute('open', true);
        detail.dataset.wasOpen = 'true'; // Mark it as opened by the script
    });
});

// Optional: Listen for afterprint event to close all details elements
// that were opened by the script
window.addEventListener('afterprint', function () {
    document.querySelectorAll('details').forEach(function (detail) {
        if (detail.dataset.wasOpen) {
            detail.removeAttribute('open');
            delete detail.dataset.wasOpen; // Clean up
        }
    });
});
      </script>
      {/*Lightbox */}
      {
      ENABLE_LIGHTBOX && (
      <script type="module">
         import 'https://cdn.jsdelivr.net/gh/mcstudios/glightbox/dist/js/glightbox.min.js';

         window.addEventListener('load', () => {
           const lightbox = GLightbox({
             selector: '.mediaglightbox, .fileglightbox, .embedglightbox'
           });
         });
      </script>
      )
      }
      {
      REFERENCES && REFERENCES["popovers"] && (
      <script type="module">
  import { computePosition, offset, shift, flip, autoUpdate } from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@1.5.3/+esm';

  document.addEventListener('DOMContentLoaded', () => {
    const popoverTriggers = document.querySelectorAll('[data-popover-target]');
    let openPopovers = [];
    let cleanupAutoUpdate = new Map();
    let hoverTimeouts = new Map();

    const getPopoverLevel = (el) => {
      let level = 0;
      while (el && el.closest('[data-popover-target]')) {
        level++;
        el = el.parentElement;
      }
      // console.log(level - 1);
      return level - 1;
    };

    const hideAllPopovers = (level = 0) => {
      // console.log('hideAllPopovers called');
      // console.log(openPopovers);
      openPopovers.forEach(popoverEl => {
        if (getPopoverLevel(popoverEl) >= level) {
          hidePopover(popoverEl);
        }
      });
    };

    const hidePopover = (popoverEl) => {
      // console.log('hidePopover called for', popoverEl);
      if (popoverEl) {
        popoverEl.style.visibility = 'hidden';
        popoverEl.classList.add('hidden');
        popoverEl.style.opacity = '0';
        popoverEl.style.top = '0px';
        popoverEl.style.left = '0px';

        const cleanup = cleanupAutoUpdate.get(popoverEl);
        if (cleanup) {
          cleanup();
          cleanupAutoUpdate.delete(popoverEl);
        }
        const openPopoverIndex = openPopovers.indexOf(popoverEl);
        if (openPopoverIndex !== -1) {
          openPopovers.splice(openPopoverIndex, 1);
        }
      }
    };

    const showPopover = (triggerEl, popoverEl) => {
      const level = getPopoverLevel(triggerEl);
      hideAllPopovers(level);

      const update = () => {
        computePosition(triggerEl, popoverEl, {
          middleware: [offset(6),shift({ padding: 3 }), flip({ padding: 3 })]
        }).then(({ x, y }) => {
          Object.assign(popoverEl.style, {
            left: `${x}px`,
            top: `${y}px`,
            position: 'absolute'
          });
        });
      };

      update();
      popoverEl.classList.remove('hidden');
  requestAnimationFrame(() => {
    popoverEl.style.visibility = 'visible';
      popoverEl.style.opacity = '1';
  });

      openPopovers.push(popoverEl);
      cleanupAutoUpdate.set(popoverEl, autoUpdate(triggerEl, popoverEl, update));
    };

    popoverTriggers.forEach(triggerEl => {
      const popoverID = triggerEl.dataset.popoverTarget;
      const popoverEl = document.getElementById(popoverID);

      triggerEl.addEventListener('mouseenter', () => {
        const timeoutId = hoverTimeouts.get(popoverEl);
        if (timeoutId) {
          clearTimeout(timeoutId);
          hoverTimeouts.delete(popoverEl);
        }
        showPopover(triggerEl, popoverEl);
      });

      triggerEl.addEventListener('mouseleave', () => {
        const timeoutId = setTimeout(() => {
          hidePopover(popoverEl);
        }, 100);
        hoverTimeouts.set(popoverEl, timeoutId);
      });

      triggerEl.addEventListener('focus', () => {
        showPopover(triggerEl, popoverEl);
      });

      triggerEl.addEventListener('blur', () => {
        hidePopover(popoverEl);
      });

      popoverEl.addEventListener('mouseenter', () => {
        const timeoutId = hoverTimeouts.get(popoverEl);
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      });

      popoverEl.addEventListener('mouseleave', () => {
        hidePopover(popoverEl);
      });
    });

    document.addEventListener('click', (event) => {
  const popoverLink = event.target.closest('[data-popover-link]');
  if (popoverLink) {
    hideAllPopovers(-1);
  } else if (!event.target.closest('[data-popover-target]')) {
    hideAllPopovers(-1);
  }
});

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        hideAllPopovers(-1);
      }
    });
  });

</script>



      )
      }
<script type="module">
  document.addEventListener('DOMContentLoaded', function() {
    const dataTables = document.querySelectorAll('table.datatable');
    if (dataTables.length > 0) {
      // Load simple-datatables script
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/simple-datatables@9.0.4/dist/umd/simple-datatables.min.js';
      script.onload = initDataTables;
      document.head.appendChild(script);

      // Load simple-datatables CSS
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = 'https://cdn.jsdelivr.net/npm/simple-datatables@9.0.4/dist/style.min.css';
      document.head.appendChild(link);

      // Add custom styles
      const style = document.createElement('style');
      style.textContent = `
        .datatable-input {
          padding: 3px 6px;
          border: 1px solid #ccc;
          border-radius: 6px;
          font-size: 14px;
          transition: all 0.3s ease;
          width: 100%;
          box-sizing: border-box;
        }
        .datatable-input:focus {
          border-color: #007bff;
          outline: none;
          box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }
        .filter-toggle {
          background: none;
          border: none;
          font-size: 20px;
          cursor: pointer;
          padding: 0 10px;
          transition: all 0.3s ease;
        }
        .filter-toggle:hover {
          opacity: 0.7;
        }
        .filter-row, .search-inputs {
          transition: all 0.3s ease;
          max-height: 50px;
          opacity: 1;
          overflow: hidden;
        }
        .filter-row.hide, .search-inputs.hide {
          max-height: 0;
          display:none;
          opacity: 0;
          padding-top: 0;
          padding-bottom: 0;
          margin-top: 0;
          margin-bottom: 0;
        }
        .datatable-top {
          display: flex;
          flex-wrap: wrap;
          justify-content: space-between;
          align-items: center;
          padding: 4px;
          margin-bottom: 10px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .datatable-top-left {
          display: flex;
          align-items: center;
          flex-grow: 1;
        }
        .datatable-info {
          font-size: small;
          font-family: monospace;
          transition: all 0.3s ease;
          white-space: nowrap;
        }
        @media (max-width: 640px) {
          .datatable-top {
            flex-wrap: nowrap;
          }
          .datatable-top-left {
            width: auto;
            margin-bottom: 0;
          }
          .datatable-info {
            padding-left: 8px;
          }
          .datatable-top.filter-active {
            flex-direction: column;
            align-items: stretch;
          }
          .datatable-top.filter-active .datatable-top-left {
            width: 100%;
            margin-bottom: 8px;
          }
          .datatable-top.filter-active .datatable-info {
            width: 100%;
            padding-right: 8px;
            text-align: right;
          }
        }
      `;
      document.head.appendChild(style);
    }
  });

  function initDataTables() {
    const dataTables = document.querySelectorAll('table.datatable');
    let options = {
      searchable: true,
      paging: false,
      labels: {"info": "{rows} rows"},
      tableRender: (_data, table, type) => {
        if (type === "print") {
          return table;
        }
        const tHead = table.childNodes[0];
        const filterHeaders = {
          nodeName: "TR",
          attributes: {
            class: "filter-row hide",
          },
          childNodes: tHead.childNodes[0].childNodes.map(
            (_th, index) => ({
              nodeName: "TH",
              childNodes: [
                {
                  nodeName: "INPUT",
                  attributes: {
                    class: "datatable-input",
                    type: "search",
                    "data-columns": `[${index}]`,
                  }
                }
              ]
            })
          )
        };
        tHead.childNodes.push(filterHeaders);
        return table;
      },
      template: (options, dom) => `
        <div class='${options.classes.top}'>
          <div class="datatable-top-left">
            <button class="filter-toggle" style="padding: 8px;">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 30 30">
                <path fill="currentColor" d="M14 12v7.88c.04.3-.06.62-.29.83a.996.996 0 0 1-1.41 0l-2.01-2.01a.99.99 0 0 1-.29-.83V12h-.03L4.21 4.62a1 1 0 0 1 .17-1.4c.19-.14.4-.22.62-.22h14c.22 0 .43.08.62.22a1 1 0 0 1 .17 1.4L14.03 12z"/>
              </svg>
            </button>
            <div class='${options.classes.search} search-inputs hide' style="display: flex; gap: 10px;">
              <input class='${options.classes.input}' placeholder='OR search' type='search' title='${options.labels.searchTitle}'${dom.id ? ` aria-controls="${dom.id}"` : ""}>
              <input class='${options.classes.input}' placeholder='AND search' type='search' data-and="true" title='${options.labels.searchTitle}'${dom.id ? ` aria-controls="${dom.id}"` : ""}>
            </div>
          </div>
          <div class='${options.classes.info}'></div>
        </div>
        <div class='${options.classes.container}'${options.scrollY.length ? ` style='height: ${options.scrollY}; overflow-Y: auto;'` : ""}></div>
      `
    };

    dataTables.forEach(table => {
      const dt = new simpleDatatables.DataTable(table, options);

      // Custom search function
      const customSearch = (query, row, andSearch) => {
        const searchTerms = query.toLowerCase().split(' ');
        const rowData = row.toLowerCase();

        if (andSearch) {
          return searchTerms.every(term => rowData.includes(term));
        } else {
          return searchTerms.some(term => rowData.includes(term));
        }
      };

      // Override the default search behavior
      dt.on('datatable.search', function(query, matched) {
        const andSearchInput = this.wrapperDOM.querySelector('input[data-and="true"]');
        const andSearchQuery = andSearchInput ? andSearchInput.value : '';
        const columnFilters = Array.from(this.wrapperDOM.querySelectorAll('.datatable-input')).map(input => input.value);

        this.data.forEach((row, index) => {
          const tr = this.activeRows[index];
          const orMatch = customSearch(query, row.join(' '), false);
          const andMatch = customSearch(andSearchQuery, row.join(' '), true);
          const columnMatch = columnFilters.every((filter, i) =>
            filter === '' || customSearch(filter, row[i], false)
          );

          if (orMatch && andMatch && columnMatch) {
            tr.style.display = '';
          } else {
            tr.style.display = 'none';
          }
        });

        this.update();
        this.emit('datatable.afterSearch', query, matched);
      });

      // Add event listener for AND search
      const andSearchInput = dt.wrapperDOM.querySelector('input[data-and="true"]');
      andSearchInput.addEventListener('keyup', function() {
        dt.search(dt.input.value);
      });

      // Add event listeners for column filters
      const columnFilters = dt.wrapperDOM.querySelectorAll('.datatable-input');
      columnFilters.forEach(input => {
        input.addEventListener('keyup', function() {
          dt.search(dt.input.value);
        });
      });

      // Add event listener for filter toggle button
      const filterToggle = dt.wrapperDOM.querySelector('.filter-toggle');
      const filterRow = dt.wrapperDOM.querySelector('.filter-row');
      const searchInputs = dt.wrapperDOM.querySelector('.search-inputs');
      const datatableTop = dt.wrapperDOM.querySelector('.datatable-top');
      filterToggle.addEventListener('click', function() {
        const columnFilters = dt.wrapperDOM.querySelectorAll('.datatable-input');
        const areAllEmpty = Array.from(columnFilters).every(input => input.value === '');
        const isHidden = filterRow.classList.contains('hide');

        if (isHidden || !areAllEmpty) {
          filterRow.classList.remove('hide');
          searchInputs.classList.remove('hide');
          datatableTop.classList.add('filter-active');
        } else {
          filterRow.classList.add('hide');
          searchInputs.classList.add('hide');
          datatableTop.classList.remove('filter-active');
        }
      });
    });
  }
</script>
   </body>
</html>
