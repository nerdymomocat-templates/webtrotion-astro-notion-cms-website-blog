---
import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";
import TOC from "@/components/blog/TOC";
import WebMentions from "@/components/blog/webmentions/index";

import type { Post } from "src/lib/interfaces";
import type { Heading } from "@/types";
import PostComments from "@/components/blog/PostComments";
import { REFERENCES } from "@/constants";
import ReferencesSection from "@/components/blog/ReferencesSection.astro";

interface Props {
	post: Post;
	ogImage?: string;
	headings: Heading[];
}

const { post, ogImage, headings } = Astro.props;

const socialImage = ogImage
	? ogImage
	: `/og-image/${post.Slug}.png`;
const articleDate = new Date(post.Date).toISOString();
---

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<!-- <BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}> -->
<BaseLayout
	meta={{ title: post.Title, description: post.Excerpt, articleDate, ogImage: socialImage }}
>
	<div class="sm:grid sm:grid-cols-4 sm:items-start sm:gap-x-10">
		<article class="col-span-3 break-words" data-pagefind-body>
			<div id="blog-hero"><BlogHero post={post} /></div>
			<!-- <div id="blog-hero"><BlogHero content={post} /></div> -->
			<div class="mt-12">
				<slot />
        <hr class="divider w-70 mx-auto my-4 h-0.5 rounded border-0 bg-accent/30" />

        {REFERENCES && <ReferencesSection post={post}/>}

				<WebMentions />

        <PostComments />
			</div>
		</article>
		{!!headings.length && <TOC headings={headings} />}
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
</BaseLayout>
